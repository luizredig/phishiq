model CampanhaTeste {
  id         String   @id @default(uuid())
  campanhaId String
  campanha   Campanha @relation(fields: [campanhaId], references: [id])
  testeId    String
  teste      Teste    @relation(fields: [testeId], references: [id])

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?

  @@unique([campanhaId, testeId])
}

model Campanha {
  id        String          @id @default(uuid())
  titulo    String
  descricao String?
  status    StatusCampanha
  logs      Log[]
  testes    CampanhaTeste[]

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?
}

enum CanalTeste {
  EMAIL
}

model Departamento {
  id       String                @id @default(uuid())
  nome     String
  testes   TesteDepartamento[]
  logs     Log[]
  usuarios UsuarioDepartamento[]

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?
}

model Log {
  id        String  @id @default(uuid())
  tipo      TipoLog
  descricao String?

  campanha       Campanha?     @relation(fields: [campanhaId], references: [id])
  campanhaId     String?
  departamento   Departamento? @relation(fields: [departamentoId], references: [id])
  departamentoId String?
  teste          Teste?        @relation(fields: [testeId], references: [id])
  testeId        String?

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  output          = "../generated/schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusCampanha {
  INICIADA
  EM_ANDAMENTO
  FINALIZADA
}

enum StatusTeste {
  ENVIADO
  FALHA
}

model TesteDepartamento {
  id             String       @id @default(uuid())
  testeId        String
  teste          Teste        @relation(fields: [testeId], references: [id])
  departamentoId String
  departamento   Departamento @relation(fields: [departamentoId], references: [id])

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?

  @@unique([testeId, departamentoId])
}

model Teste {
  id String @id @default(uuid())

  departamentos    TesteDepartamento[]
  canal            CanalTeste
  status           StatusTeste
  caiuNoTeste      Boolean             @default(false)
  reportouPhishing Boolean             @default(false)
  logs             Log[]
  campanhas        CampanhaTeste[]
  usuario          Usuario?            @relation(fields: [usuarioId], references: [id])
  usuarioId        String?

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?
}

enum TipoLog {
  LOGIN
  CRIACAO
  ATUALIZACAO
  DELECAO
  TESTE_ENVIADO
  TESTE_CLICADO
  OUTRO
}

model UsuarioDepartamento {
  id             String       @id @default(uuid())
  usuarioId      String
  departamentoId String
  usuario        Usuario      @relation(fields: [usuarioId], references: [id])
  departamento   Departamento @relation(fields: [departamentoId], references: [id])

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?

  @@unique([usuarioId, departamentoId])
}

model Usuario {
  id        String       @id @default(uuid())
  nome      String
  sobrenome String?
  email     String       @unique
  cargo     CargoUsuario @default(FUNCIONARIO)

  departamentos UsuarioDepartamento[]
  testes        Teste[]

  ativo         Boolean   @default(true)
  criadoEm      DateTime  @default(now())
  criadoPor     String?
  atualizadoEm  DateTime  @updatedAt
  atualizadoPor String?
  inativadoEm   DateTime?
  inativadoPor  String?
}

enum CargoUsuario {
  ADMIN
  FUNCIONARIO
}
