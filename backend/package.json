{
  "name": "phishiq-backend",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "app:prepare": "mkdir -p app/dist && cp package.json app/package.json && cp tsconfig.json app/tsconfig.json && cp -r prisma app/prisma",
    "build:prod": "sh -c 'TENANT=${npm_config_tenant}; if [ -z \"$TENANT\" ]; then echo \"Erro: parâmetro --tenant é obrigatório (ex.: --tenant=porto-itapoa)\"; exit 1; fi; dotenv -e .env.$TENANT -- sh -c \"npm run prisma:deploy && npm run generate && npm run build && npm run app:prepare\"'",
    "dev": "dotenv -e .env.development -- sh -c \"npm run app:prepare && npm run generate && npm run generate:master&& npm run start:watch\"",
    "format": "prisma format --schema=prisma/schema",
    "format:master": "prisma format --schema=prisma/master",
    "generate": "prisma generate --schema=prisma/schema",
    "generate:master": "prisma generate --schema=prisma/master",
    "migrate": "sh -c 'TENANT=${npm_config_tenant}; NAME=${npm_config_name}; if [ -z \"$TENANT\" ]; then echo \"Erro: parâmetro --tenant é obrigatório (ex.: --tenant=acme)\"; exit 1; fi; if [ -z \"$NAME\" ]; then echo \"Erro: parâmetro --name é obrigatório (ex.: --name=inicial)\"; exit 1; fi; dotenv -e .env.$TENANT -- sh -c \"prisma migrate dev --schema=prisma/schema --name=$NAME\"'",
    "migrate:master": "sh -c 'NAME=${npm_config_name}; if [ -z \"$NAME\" ]; then echo \"Erro: parâmetro --name é obrigatório (ex.: --name=inicial)\"; exit 1; fi; dotenv -e .env.development -- sh -c \"prisma migrate dev --schema=prisma/master --name=$NAME\"'",
    "migrate:deploy": "sh -c 'TENANT=${npm_config_tenant}; if [ -z \"$TENANT\" ]; then echo \"Erro: parâmetro --tenant é obrigatório (ex.: --tenant=acme)\"; exit 1; fi; dotenv -e .env.$TENANT -- sh -c \"prisma migrate deploy --schema=prisma/schema\"'",
    "migrate:deploy:master": "dotenv -e .env.development -- sh -c \"prisma migrate deploy --schema=prisma/master\"",
    "studio:master": "dotenv -e .env.development -- sh -c \"prisma studio --schema=prisma/master\"",
    "studio": "sh -c 'TENANT=${npm_config_tenant}; if [ -z \"$TENANT\" ]; then echo \"Erro: parâmetro --tenant é obrigatório (ex.: --tenant=acme)\"; exit 1; fi; dotenv -e .env.$TENANT -- sh -c \"prisma studio --schema=prisma/schema\"'",
    "start:watch": "nest start --watch"
  },
  "dependencies": {
    "@casl/ability": "^6.7.3",
    "@casl/prisma": "^1.5.2",
    "@nestjs/common": "^11.0.1",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/mapped-types": "*",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.1",
    "@nestjs/platform-socket.io": "^11.0.12",
    "@nestjs/websockets": "^11.0.12",
    "@prisma/client": "^6.5.0",
    "@types/nodemailer": "^6.4.17",
    "bcrypt": "^5.1.1",
    "dotenv": "^17.2.2",
    "jwks-rsa": "^3.2.0",
    "nestjs-zod": "^4.3.1",
    "nodemailer": "^7.0.3",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1",
    "socket.io": "^4.8.1",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@rocketseat/eslint-config": "^2.2.2",
    "@swc/cli": "^0.6.0",
    "@swc/core": "^1.10.7",
    "@types/bcrypt": "^5.0.2",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.7",
    "@types/passport-jwt": "^4.0.1",
    "@types/passport-local": "^1.0.38",
    "@types/supertest": "^6.0.2",
    "dotenv-cli": "^10.0.0",
    "eslint": "^9.23.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^16.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.4.2",
    "prisma": "^6.5.0",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.20.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
