enum Action {
  CREATE
  READ
  UPDATE
  DELETE
  OPEN
  SEND
  ERROR
}

model Department {
  id        String               @id @default(uuid())
  name      String
  phishings PhishingDepartment[]
  users     UserDepartment[]

  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  created_by     String
  updated_by     String
  updated_at     DateTime  @updatedAt
  inactivated_at DateTime?
  inactivated_by String?
}

enum EmailType {
  WORK
  PERSONAL
}

model Email {
  id      String    @id @default(uuid())
  address String    @unique
  user_id String
  user    User      @relation(fields: [user_id], references: [id])
  type    EmailType

  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  created_by     String
  updated_by     String
  updated_at     DateTime  @updatedAt
  inactivated_at DateTime?
  inactivated_by String?
}

enum Entity {
  DEPARTMENT
  EMAIL
  ENUM
  MODULE
  PHISHING
  PSEUDONYM
  TENANT
  TENANT_MODULE
  USER
  USER_DEPARTMENT
}

model Log {
  id        String @id @default(uuid())
  entity    Entity
  entity_id String
  action    Action

  created_at DateTime @default(now())
  created_by String
}

enum PhishingChannel {
  EMAIL
}

model PhishingDepartment {
  id            String     @id @default(uuid())
  phishing_id   String
  phishing      Phishing   @relation(fields: [phishing_id], references: [id])
  department_id String
  department    Department @relation(fields: [department_id], references: [id])

  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  created_by     String
  updated_by     String
  updated_at     DateTime  @updatedAt
  inactivated_at DateTime?
  inactivated_by String?

  @@unique([phishing_id, department_id])
}

enum PhishingStatus {
  SENT
  CLICKED
  SEND_FAILED
}

model Phishing {
  id String @id @default(uuid())

  clicked  Boolean @default(false)
  reported Boolean @default(false)

  departments PhishingDepartment[]
  channel     PhishingChannel
  status      PhishingStatus

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  created_by     String
  updated_by     String
  updated_at     DateTime  @updatedAt
  inactivated_at DateTime?
  inactivated_by String?
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  output          = "../generated/schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserDepartment {
  id            String     @id @default(uuid())
  user_id       String
  department_id String
  usuario       User       @relation(fields: [user_id], references: [id])
  department    Department @relation(fields: [department_id], references: [id])

  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  created_by     String
  updated_by     String
  updated_at     DateTime  @updatedAt
  inactivated_at DateTime?
  inactivated_by String?

  @@unique([user_id, department_id])
}

model User {
  id               String           @id @default(uuid())
  name             String
  emails           Email[]
  password         String?
  roles            String[]
  tenant_id        String
  phishings        Phishing[]
  user_departments UserDepartment[]

  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  created_by     String
  updated_by     String
  updated_at     DateTime  @updatedAt
  inactivated_at DateTime?
  inactivated_by String?
}
